{"version":3,"sources":["elements/Gradient/Gradient.tsx","elements/Container/Container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","darkBlue","lightBlue","brightGreen","brightPurple","brightPink","lightPink","otherColors","black","white","animation","keyframes","_templateObject","Circle","styled","div","_templateObject2","_templateObject3","_ref","size","Number","isFinite","concat","_ref2","props","color","Gradient","react_default","a","createElement","Object","assign","positions","ContainerStyle","Container_templateObject","_positions$props$posi","slicedToArray","position","x","y","s","Container","_useState","useState","_useState2","index","setIndex","onClick","length","keys","colorKeys","center","mapGradient","fn","i","angle","angleShift","pointFromVector","App","elements_Container_Container","className","elements_Gradient_Gradient","style","transform","mixBlendMode","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i8BAGO,IAAMA,EAAS,CACpBC,SAAQ,UACRC,UAAS,aACTC,YAAW,YACXC,aAAY,aACZC,WAAU,YACVC,UAAS,eAEEC,EAAc,CACzBC,MAAK,QACLC,MAAK,eAGDC,EAAYC,YAAHC,KAUTC,GALSC,IAAOC,IAAVC,IAEGN,GAGAI,IAAOC,IAAVE,IAMD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACPC,OAAOC,SAASF,GAAhB,GAAAG,OAA2BH,EAA3B,cAAAG,OAA8CH,EAA9C,cACQ,SAAAI,GAAA,IAAGJ,EAAHI,EAAGJ,KAAH,OACRC,OAAOC,SAASF,GAAhB,GAAAG,OAA2BH,EAA3B,cAAAG,OAA8CH,EAA9C,cAOO,SAAAK,GAAK,OAAIxB,EAAOwB,EAAMC,QAAUlB,EAAYiB,EAAMC,QAClD,SAAAD,GAAK,OAAIxB,EAAOwB,EAAMC,QAAUlB,EAAYiB,EAAMC,QAClD,SAAAD,GAAK,OAAIxB,EAAOwB,EAAMC,QAAUlB,EAAYiB,EAAMC,UAQ9CC,EAJE,SAAAF,GACf,OAAOG,EAAAC,EAAAC,cAAChB,EAADiB,OAAAC,OAAA,CAAQN,MAAO,QAAYD,yRC9CpC,IAAMQ,EAAY,CAChB,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,EAAG,GACP,CAAC,IAAK,GAAI,GACV,EAAE,GAAI,GAAI,KACV,EAAE,IAAK,GAAI,MASPC,EAAiBnB,IAAOC,IAAVmB,IANA,SAAAV,GAAS,IAAAW,EAAAL,OAAAM,EAAA,EAAAN,CACTE,EAAUR,EAAMa,UADP,GACpBC,EADoBH,EAAA,GACjBI,EADiBJ,EAAA,GACdK,EADcL,EAAA,GAG3B,mBAAAb,OAAoBgB,EAApB,OAAAhB,OAA2BiB,EAA3B,aAAAjB,OAAwCkB,EAAxC,OAsBaC,EAVG,SAAAjB,GAAS,IAAAkB,EACCC,mBAAS,GADVC,EAAAd,OAAAM,EAAA,EAAAN,CAAAY,EAAA,GAClBG,EADkBD,EAAA,GACXE,EADWF,EAAA,GAOzB,OAAOjB,EAAAC,EAAAC,cAACI,EAADH,OAAAC,OAAA,CAAgBM,SAAUQ,EAAOE,QAJ1B,WACZD,GAAUD,EAAQ,GAAKb,EAAUgB,UAGyBxB,OCzBpCM,OAAOmB,KAAKjD,oBAAzBkD,oBAEPC,EAAS,CAAEb,GAAI,EAAGC,EAAG,GAGrBa,EAAc,SAAAC,GAAE,OAAI,SAAC5B,EAAe6B,GACxC,IAAMC,GAAmD,GAAzCD,EAAIJ,EAAUF,OAAU,IAAM,KACxCQ,EAAaC,YAAgBN,EAAQI,EAAO,IAElD,OAAOF,EAAG5B,EAAO+B,KAoDJE,mLA/CX,OACE/B,EAAAC,EAAAC,cAAC8B,EAAD,KACEhC,EAAAC,EAAAC,cAAA,UAAQ+B,UAAU,cAChBjC,EAAAC,EAAAC,cAACgC,EAAD,CACE1C,KAAM,OACNM,MAAO,WACPqC,MAAO,CACLC,UAAS,eAAAzC,OAAiB6B,EAAOb,EAAxB,OAAAhB,OAA+B6B,EAAOZ,EAAtC,WACTyB,aAAc,YAIjBd,EAAUe,IACTb,EAAY,SAAC3B,EAADP,GAAA,IAAUoB,EAAVpB,EAAUoB,EAAGC,EAAbrB,EAAaqB,EAAb,OACVZ,EAAAC,EAAAC,cAACgC,EAAD,CACE1C,KAAM,OACNM,MAAOA,EACPqC,MAAO,CACLC,UAAS,eAAAzC,OAAiBgB,EAAjB,OAAAhB,OAAwBiB,EAAxB,WACTyB,aAAc,eAKtBrC,EAAAC,EAAAC,cAACgC,EAAD,CACE1C,KAAM,OACNM,MAAO,WACPqC,MAAO,CACLC,UAAS,eAAAzC,OAAiB6B,EAAOb,EAAxB,OAAAhB,OAA+B6B,EAAOZ,EAAtC,cAIZW,EAAUe,IACTb,EAAY,SAAC3B,EAADF,GAAA,IAAUe,EAAVf,EAAUe,EAAGC,EAAbhB,EAAagB,EAAb,OACVZ,EAAAC,EAAAC,cAACgC,EAAD,CACE1C,KAAM,OACNM,MAAOA,EACPqC,MAAO,CAAEC,UAAS,eAAAzC,OAAiBgB,EAAjB,OAAAhB,OAAwBiB,EAAxB,0BAvChB2B,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a3af770d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\nexport const colors = {\n  darkBlue: `0,0,137`,\n  lightBlue: `77,212,224`,\n  brightGreen: `0,250,184`,\n  brightPurple: `113,12,254`,\n  brightPink: `255,0,104`,\n  lightPink: `255,180,176`\n};\nexport const otherColors = {\n  black: `0,0,0`,\n  white: `255,255,255`\n};\n\nconst animation = keyframes`\n  0% {transform: rotate(360deg);}\n  100% {transform: rotate(0deg);}\n`;\n\nconst Rotate = styled.div`\n  transform: translateY(5%);\n  animation: ${animation} 1s infinite;\n`;\n\nconst Circle = styled.div`\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: ${({ size }) =>\n    Number.isFinite(size) ? `${size}px` : `calc(${size} + 10rem)`};\n  height: ${({ size }) =>\n    Number.isFinite(size) ? `${size}px` : `calc(${size} + 10rem)`};\n  max-width: 70vw;\n  max-height: 70vw;\n\n  mix-blend-mode: multiply;\n  background: radial-gradient(\n    ellipse at center,\n    rgba(${props => colors[props.color] || otherColors[props.color]}, 1) 0%,\n    rgba(${props => colors[props.color] || otherColors[props.color]}, 0.5) 40%,\n    rgba(${props => colors[props.color] || otherColors[props.color]}, 0) 70%\n  );\n`;\n\nconst Gradient = props => {\n  return <Circle color={\"pink\"} {...props} />;\n};\n\nexport default Gradient;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst positions = [\n  [0, 80, 2], // Human\n  [0, 0, 1], // center\n  [70, -70, 2], // Active\n  [-80, 50, 2.5], // Brave\n  [-50, -90, 2.5] // Active\n];\n\nconst getPosition = props => {\n  const [x, y, s] = positions[props.position];\n\n  return `translate(${x}%, ${y}%) scale(${s})`;\n};\n\nconst ContainerStyle = styled.div`\n  position: relative;\n  transform-origin: center center;\n  transform: ${getPosition};\n  transition: 0.6s transform cubic-bezier(0.49, 0.15, 0.35, 1);\n  will-change: transform;\n  cursor: pointer;\n`;\n\nconst Container = props => {\n  const [index, setIndex] = useState(0);\n\n  const cycle = () => {\n    setIndex((index + 1) % positions.length);\n  };\n\n  return <ContainerStyle position={index} onClick={cycle} {...props} />;\n};\n\nexport default Container;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Iris from \"./elements/Iris/Iris\";\nimport Gradient, { colors } from \"./elements/Gradient/Gradient\";\nimport { pointFromVector } from \"@popmotion/popcorn\";\nimport styled from \"styled-components\";\nimport Container from \"./elements/Container/Container\";\n\nconst [_, ...colorKeys] = Object.keys(colors);\n\nconst center = { x: -0, y: 0 };\nconst scale = 1;\n\nconst mapGradient = fn => (color: string, i: number) => {\n  const angle = ((i / colorKeys.length) * 360 - 45 * 3) * -1;\n  const angleShift = pointFromVector(center, angle, 25);\n\n  return fn(color, angleShift);\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <header className=\"App-header\">\n          <Gradient\n            size={\"40vw\"}\n            color={\"darkBlue\"}\n            style={{\n              transform: `translate3d(${center.x}%, ${center.y}%, 1px)`,\n              mixBlendMode: \"normal\"\n            }}\n          />\n\n          {colorKeys.map(\n            mapGradient((color, { x, y }) => (\n              <Gradient\n                size={\"40vw\"}\n                color={color}\n                style={{\n                  transform: `translate3d(${x}%, ${y}%, 1px)`,\n                  mixBlendMode: \"normal\"\n                }}\n              />\n            ))\n          )}\n          <Gradient\n            size={\"40vw\"}\n            color={\"darkBlue\"}\n            style={{\n              transform: `translate3d(${center.x}%, ${center.y}%, 1px)`\n            }}\n          />\n\n          {colorKeys.map(\n            mapGradient((color, { x, y }) => (\n              <Gradient\n                size={\"40vw\"}\n                color={color}\n                style={{ transform: `translate3d(${x}%, ${y}%, 1px)` }}\n              />\n            ))\n          )}\n        </header>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}